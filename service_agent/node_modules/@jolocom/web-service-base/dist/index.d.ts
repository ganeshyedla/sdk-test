import { Agent, JSONWebToken } from '@jolocom/sdk';
import { Channel } from '@jolocom/sdk/js/channels';
export interface WebEndPoints {
    interxn: string;
    chan: string;
    rpc: string;
}
export interface JolocomWebServiceOptions {
    publicHostport?: string;
    tls?: boolean;
    rpcMap?: RPCMap;
    paths?: WebEndPoints;
}
interface JWTDesc {
    id: string;
    jwt: string;
    qr: string;
}
interface RPCHandlerCtx {
    createChannel: ({ description: string }: {
        description: any;
    }) => Promise<Channel>;
    createInteractionCallbackURL: (cb: (payload: string) => Promise<JSONWebToken<any> | void>) => string;
    wrapJWT: (jwt: string | JSONWebToken<any>) => Promise<JWTDesc>;
}
interface RPCMap {
    [key: string]: (request: any, ctx: RPCHandlerCtx) => Promise<any>;
}
export declare class JolocomWebServiceBase {
    agent: Agent;
    rpcMap: RPCMap;
    protected publicHostport?: string;
    protected publicWsUrl: string;
    protected publicHttpUrl: string;
    protected enableTls: boolean;
    protected paths: WebEndPoints;
    constructor(agent: Agent, options?: JolocomWebServiceOptions);
    protected _callbacks: {
        [id: string]: (payload: string) => Promise<JSONWebToken<any> | void>;
    };
    createInteractionCallbackURL(cb: (payload: string) => Promise<JSONWebToken<any> | void>): string;
    processCallback(cbId: string, payload: {
        token: string;
    }): Promise<"" | {
        token: string;
    }>;
    private _basePath;
    basePath: string;
    createChannel({ description }: {
        description: string;
    }): Promise<Channel>;
    processRPC(msg: {
        id: string;
        rpc: string;
        request: string;
    }): Promise<{
        id: string;
        request: {
            id: string;
            rpc: string;
            request: string;
        };
        response: any;
    }>;
    wrapJWT(tokenOrJwt: string | JSONWebToken<any>): Promise<JWTDesc>;
}
export {};
