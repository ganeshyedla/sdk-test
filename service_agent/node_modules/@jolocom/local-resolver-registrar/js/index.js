"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegistrar = exports.getResolver = void 0;
/**
 * Returns a configured resolver for a local, event based, DID method
 * @param prefix - the DID Method prefix to use. Given that this code is fairly generic / agnostic to the structure
 * of the underlying events, it's not bound to one did method.
 * @param cfg.dbInstance - Storage / DB interface used to delete, store, and read Event logs. The resolver only
 * reads events from the DB, with the registrar being the one appending new events.
 * @param cfg.validateEvents - A function which takes a list of events, performs all necessary validation, and
 * return a Did Document in case of success, or throws
 */
exports.getResolver = function (prefix) { return function (cfg) {
    var _a;
    return (_a = {},
        /**
         * Given a [prefix] DID, will attempt to find all associated events in the local database,
         * validate them, and return the corresponding DID Document
         * @param did - the did to resolve
         * @param parsed - a object containing the parsed DID, as provided by the "did-resolver" module
         * @param didResolver - instance of {@link Resolver}, populated by the "did-resolver" module
         * @returns DID Document - Did Document for the corresponding DID in JSON form
         */
        _a[prefix] = function (did, parsed, _) { return __awaiter(void 0, void 0, void 0, function () {
            var events, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, cfg.dbInstance.read(parsed.id)];
                    case 1:
                        events = _c.sent();
                        if (!(events && events.length)) return [3 /*break*/, 3];
                        _b = (_a = JSON).parse;
                        return [4 /*yield*/, cfg.validateEvents(events)];
                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    case 3: return [2 /*return*/, null];
                }
            });
        }); },
        _a);
}; };
/**
 * Returns a configured registrar for a local, event based, DID method
 * @param dbInstance - Storage / DB interface used to delete, store, and read Event logs. The registrar reads and appends
 * to this DB.
 * @param validateEvents - A function which takes a list of events, performs all necessary validation, and return a Did Document in case of success, or throws
 * @param getIdFromEvent - Helper function to extract ID from a event. Given that this code is agnostic to the underlying event structure, the functionality
 * for finding the ID for an event (or sequence of events) needs to be encapsulated this way.
 * @param create - Helper function to create a new genesis / inception event. The returned event format must be supported by the
 * `validateEvents` and `getIdFromEvent` helpers.
 */
exports.getRegistrar = function (cfg) { return ({
    update: function (events) { return __awaiter(void 0, void 0, void 0, function () {
        var keyEventId, previousEvents, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 9, , 10]);
                    return [4 /*yield*/, cfg.getIdFromEvent(events)];
                case 1:
                    keyEventId = _a.sent();
                    return [4 /*yield*/, cfg.dbInstance.read(keyEventId)];
                case 2:
                    previousEvents = (_a.sent()) || "";
                    if (!(events.length > previousEvents.length)) return [3 /*break*/, 6];
                    return [4 /*yield*/, cfg.dbInstance.delete(keyEventId)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, cfg.dbInstance.append(keyEventId, events)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, cfg.validateEvents(events)];
                case 5: return [2 /*return*/, _a.sent()];
                case 6: return [4 /*yield*/, cfg.validateEvents(previousEvents)];
                case 7: return [2 /*return*/, _a.sent()];
                case 8: return [3 /*break*/, 10];
                case 9:
                    err_1 = _a.sent();
                    return [2 /*return*/, err_1];
                case 10: return [2 /*return*/];
            }
        });
    }); },
    /**
     * Deletes all Events from the DB associated with the given id.
     *
     * @param id - the ID of the Event list to be deleted
     * @returns didDocument - the document resulting from applying all events.
     */
    delete: function (id) { return cfg.dbInstance.delete(id); },
    /**
     * Helper function to create a new genesis / inception event. The returned event format must be supported by the `validateEvents` and `getIdFromEvent` helpers.
     * @todo rethink slightly, perhaps this belongs elsewhere.
     * @returns didDocument - the document resulting from applying all events.
     */
    create: cfg.create
}); };
/**
 * A DB interface compatible with the interface required by the local registrar / resolver.
 * The simpleEventDb offers the interface by wrapping a JS object.
 * More roboust / persistent alternatives are strongly recommended for deployed versions.
 */
var db_1 = require("./db");
Object.defineProperty(exports, "createSimpleEventDb", { enumerable: true, get: function () { return db_1.createDb; } });
