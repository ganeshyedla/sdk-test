/// <reference types="node" />
import { ethers, UnsignedTransaction } from "ethers";
export declare type SignatureLike = {
    r: string;
    s: string;
    recoveryParam?: number;
};
export default class RegistryContract {
    private readonly provider;
    private contract;
    constructor(address: string, providerUri: string);
    /**
     * Resolves a DID on the Jolocom Registry Contract. Checks if an entry for this DID exists and returns the related
     * IPFS hash if so.
     * @param did -  the DID that should be resolved
     * @returns The IPFS hash if an entry exists for the given DID
     * @throws if the DID does not have a "jolo" method string or if no entry exists
     * @example registryContract.resolveDID("did:jolo:1fb352353ff51248c5104b407f9c04c3666627fcf5a167d693c9fc84b75964e2")
     */
    resolveDID(did: string): Promise<string>;
    /**
     * Updates the mapping between a DID and a IPFS hash in the registry contract on ethereum. Creates an entry if there is non.
     * @param privateKey -  the key to sign the ethereum transaction with
     * @param did - the user's DID
     * @param didDocumentHash - IPFS hash of the related DID Document
     */
    broadcastTransaction(tx: string, sig: SignatureLike): Promise<ethers.providers.TransactionResponse>;
    /**
      * Returns an unsigned, RLP encoded, serialized, Etereum TX.
      * The returned TX can be signed, re-encoded (including the V, R, S signature parts)
      * and broadcast to the Ethereum
      */
    prepareAnchoringTransaction(did: string, hash: string, pubKey: Buffer, { gasPrice, gasLimit }?: {
        gasPrice: string;
        gasLimit: string;
    }): Promise<Buffer>;
    /**
     * Given a raw unsigned ethereum TX, and a signature object (including R, S, and the recovery value),
     * will encode the signature correctly and use 'this.provider' to send the TX to the network.
     */
    sendRawTransaction(txData: string | {
        unsignedTx: UnsignedTransaction;
        signature: SignatureLike;
    }): Promise<ethers.providers.TransactionResponse | ethers.providers.TransactionReceipt>;
}
