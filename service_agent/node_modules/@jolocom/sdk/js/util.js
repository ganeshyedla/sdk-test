"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSecureRandomBytes = exports.generateIdentitySummary = void 0;
const crypto_1 = require("crypto");
/**
 * Given an identity, returns an object satisfying the {@link IdentitySummary} interface.
 * @dev Currently used with the {@link IssuerCard} component
 * @note In case the identity does not contain a Public Profile credential,
 * the function will return a minimal default which can be rendered.
 * @param identity - Instance of identity to generate the summary for
 */
exports.generateIdentitySummary = (identity) => {
    const { publicProfile, did } = identity;
    if (!publicProfile) {
        return {
            did,
        };
    }
    const { id, ...parsedProfile } = publicProfile.claim;
    return {
        did,
        publicProfile: parsedProfile,
    };
};
async function generateSecureRandomBytes(length) {
    return new Promise((resolve, reject) => {
        crypto_1.randomBytes(length, (err, bytes) => {
            if (err)
                reject(err);
            else
                resolve(bytes);
        });
    });
}
exports.generateSecureRandomBytes = generateSecureRandomBytes;
//# sourceMappingURL=util.js.map